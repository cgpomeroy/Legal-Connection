<?php

    use Drupal\legalc\Custom;
    
    function legalc_theme($existing, $type, $theme, $path) {
        return [
          'dashboard' => [
            'variables' => ['data' => NULL],
          ],
          'dashboardDesktop' => [
            'variables' => ['data' => NULL],
          ],
          'legalcMenu' => [
            'variables' => ['data' => NULL],
          ],
          'matters' => [
            'variables' => ['data' => NULL],
          ],
          'matter' => [
            'variables' => ['data' => NULL],
          ],
          'matterDesktop' => [
            'variables' => ['data' => NULL],
          ],
          'quote' => [
            'variables' => ['data' => NULL],
          ],
          'lawyer' => [
            'variables' => ['data' => NULL],
          ],
          'invoice' => [
            'variables' => ['data' => NULL],
          ],
          'payment' => [
            'variables' => ['data' => NULL],
          ],
          'lawyerWorkDetails' => [
            'variables' => ['data' => NULL],
          ],
          'lawyerProfileSidebar' => [
            'variables' => ['data' => NULL],
          ],
          'sidebarBlock' => [
            'variables' => ['data' => NULL],
          ],
          'listLawyers' => [
            'variables' => ['data' => NULL],
          ],
          'chatScreen' => [
            'variables' => ['data' => NULL],
          ],
        ];
    }
    
    function legalc_preprocess_html(&$variables)
    {
        $state = Custom\MyMobileDetect::detectState();
        if($state == 'mobile'){
            $variables['attributes']['class'][] = 'lc-site-mobile';
        }
        else {
            $variables['attributes']['class'][] = 'lc-site-desktop';
        }
        
    }
    function legalc_preprocess_page(&$variables)
    {
        //print 'preprocessing page';
        //kint($variables); 
        
        //$current_url = Url::fromRoute('<current>');
        //$path = $current_url->toString();
        //kint($path);
        //print $path;
        
        
        
        //kint(Drupal::request());
        
        //$current_path = \Drupal::request()->getUri();
        //http://legalconnection-dev.co.za.dedi6.cpt3.host-h.net/node/add/matter?test=test
        
        //$current_path = \Drupal::request()->getQueryString();
        //test=test
        
        //$current_path = \Drupal::request()->getRequestUri();
        ///node/add/matter?test=test
        
        
        
        ///node/add/matter
        
        //kint(\Drupal::routeMatch()->getRouteName());
        
        //$current_path = \Drupal::service('path.current')->getPath();
        //kint($current_path);
        
        
        //Add base_url to DrupalSettings
        global $base_url;
        $variables['#attached']['drupalSettings']['legalc']['baseUrl'] = $base_url;
        //Add the logged in uid to DrupalSettings
        $variables['#attached']['drupalSettings']['legalc']['uid'] = Custom\LCUser::getCurrentUserUid();
        
        
        kint_require();
        \Kint::$maxLevels = 5;
        //Add the chat library to whichever page needs it
        $url = \Drupal\Core\Url::fromRoute('<current>')->toString();
        //print_r($url);
        $parts = explode('/', $url);
        //kint($parts);
        
        
        /////if($parts[1] == 'chat' && !isset($parts[2])){
        if( $parts[1] == 'matter' && isset($parts[2]) && !isset($parts[3]) ){
            //kint('we are chatting');
            /////$mid = (int)$_GET['matter'];
            $mid = (int)$parts[2];
            $chat = new Custom\Chat($mid);
            $variables['#attached']['library'][] = 'legalc/legalc-chat';
            $variables['#attached']['drupalSettings']['legalc']['chat']['mid'] = $mid;
            $variables['#attached']['drupalSettings']['legalc']['chat']['channel'] = $chat->getChannelName();
        }
        /////Add javascript to dashboard on desktop
        if( $parts[1] == 'dashboard' && (isset($parts[2]) && $parts[2] == 'matter') && isset($parts[3]) ){
            //kint('we are chatting');
            /////$mid = (int)$_GET['matter'];
            $mid = (int)$parts[3];
            $chat = new Custom\Chat($mid);
            $variables['#attached']['library'][] = 'legalc/legalc-chat';
            $variables['#attached']['drupalSettings']['legalc']['chat']['mid'] = $mid;
            $variables['#attached']['drupalSettings']['legalc']['chat']['channel'] = $chat->getChannelName();
        }
        
        
        
        if($url == '/node/add/matter'){
            
            $b1 = new Custom\Banner('Create Matter', true);
            
            $b2 = $b1->renderBanner();
        
            //kint(Custom\Banner::$rendered);
            
        }
        
        if($url == '/node/add/quote'){
            $b1 = new Custom\Banner(true, 'Create Quote', true);
            $b2 = $b1->renderBanner(); 
        }
        
        if($url == '/node/add/refer_matter'){
            $b1 = new Custom\Banner(true, 'Refer Matter', true);
            $b2 = $b1->renderBanner(); 
        }
        
        
        $variables['addMatterHeader'] = Custom\Banner::$rendered;
        
        
        //if(Custom\Banner::$banner != null){
        //$variables['addMatterHeader'] = Custom\Banner::$banner;
        //}
        
    }
    
    
    function legalc_entity_presave(Drupal\Core\Entity\EntityInterface $entity)
    {
        //\Drupal\debugsave\Debugsave::debug($entity);
        
        kint_require();
        \Kint::$maxLevels = 5;
        
        
        
        
        //When saving quote insert matter reference
        $eid = $entity->getEntityType()->id();
        //\Drupal\debugsave\Debugsave::debug($eid);
        //$bun = $entity->bundle(); // same as id()
        $type = method_exists($entity, 'getType') ? $entity->getType() : '';
        //\Drupal\debugsave\Debugsave::debug($typ);
        
        
        
        //Save the matter id in the quote
        if ($eid == 'node' && $type == 'quote') {
            if($entity->isNew()){
                //\Drupal\debugsave\Debugsave::debug($entity);
                //\Drupal\debugsave\Debugsave::debug('entity is new');
                $entity->field_matter->target_id = (int)$_GET['matter'];
            }
        } 
        
        
        //When matter is saved check the client email address to see if they already have an account and save it in the client field
        if ($eid == 'node' && $type == 'matter') {
            $clientEmail = $entity->get('field_email_address')->getValue()[0]['value'];
            //kint($clientEmail);
            
            $client = Custom\Client::getUserByEmail($clientEmail);
            //kint($client);
            if($client != FALSE){
                $entity->field_client->target_id = $client->getUID();
            }
            
        }
        
        
        //Save relevant data in the new refer_matter
        if ($eid == 'node' && $type == 'refer_matter') {
            if($entity->isNew()){
                //kint($entity);
                
                $mid = (int)$_GET['matter'];
                $matter = new Custom\Matter(null, $mid);
                $entity->field_matter->target_id = $mid;
                //Lawyer doing the referring
                $entity->field_matter_referrer->target_id = $matter->getMatterOwnerLawyer();
                
                $newLawyerID = (int)$_GET['lawyer'];
                //Lawyer being referred
                $entity->field_referred_lawyer->target_id = $newLawyerID;
                
                $client = $matter->getMatterClient();
                //kint($client);
                //Set the matter id on the refer_matter node
                $entity->field_refer_matter_client->target_id = !is_null($client['client']) ? $client['client']->id() : null;
                
                //////$matter->saveMatterNewOwner($entity, 'created');
                
            }
        } 
        
        
        
    }
    
    function legalc_node_insert(Drupal\Core\Entity\EntityInterface $entity)
    {
        kint_require();
        \Kint::$maxLevels = 5;
        
        
        //When matter is created input entry into db table: lc_matter_owner
        $type = $entity->getType();
        if($type == 'matter'){
            $nid = $entity->id();
            //kint($nid);
            $matter = new Custom\Matter($entity, $nid);
            //kint($matter);
            $matter->saveMatterNewOwner();
        }
        //When matter is first referred input entry into db table: lc_matter_owner
        if($type == 'refer_matter'){
            $nid = $entity->id();
            //kint($nid);
            $matter = new Custom\Matter(null, (int)$_GET['matter']);
            //kint($matter);
            $matter->saveMatterNewOwner($entity, 'created');
        }
        
    }
    function legalc_entity_update(Drupal\Core\Entity\EntityInterface $entity)
    {
        
    }
    
    
    //Modify the Refer Matter node form
    //TODO: check that the matter hasnt already been referred
    function legalc_form_node_refer_matter_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
    {
        
        
        kint_require();
        \Kint::$maxLevels = 5;
        
        //kint($form);
        //kint($form_state);
        //kint($form_id);
        
        
        //kint($matter);
        ///$matterOwner = $matter->getMatterOwnerLawyer(true);
        ///$form['field_matter_referrer']['widget'][0]['target_id']['#default_value'] = $matterOwner;
        ///$form['field_referred_lawyer']['widget'][0]['target_id']['#default_value'] = \Drupal\user\Entity\User::load( (int)$_GET['lawyer'] );
        ///$form['field_matter']['widget'][0]['target_id']['#default_value'] = \Drupal\node\Entity\Node::load($matterId);
        
        //Check for a client account referenced on the matter
        //Else get client details from matter
        
        
        $matterId = (int)$_GET['matter'];
        $matter = new Custom\Matter(null, $matterId);
        $client = $matter->getMatterClient();
        //kint($client);
        
        //$form['field_refer_matter_client']
        $form['field_first_name']['widget'][0]['value']['#default_value'] = $client['firstName'];
        $form['field_last_name']['widget'][0]['value']['#default_value'] = $client['lastName'];
        $form['field_email_address']['widget'][0]['value']['#default_value'] = $client['email'];
        $form['field_mobile_number']['widget'][0]['value']['#default_value'] = $client['mobile'];
        $form['field_landline_number']['widget'][0]['value']['#default_value'] = $client['landline'];
        
    }
    
    
    
    /**
    * Implements hook_mail().
    */
    function legalc_mail($key, &$message, $params) {
      $options = array(
        'langcode' => $message['langcode'],
      );
      switch ($key) {
        case 'default':
          $message['from'] = \Drupal::config('system.site')->get('mail');
          $message['subject'] = t($params['subject'], array(), $options);
          $message['body'][] = $params['message'];
          break;
      }
    }
    
    
    

    //function legalc_menu_local_tasks_alter(&$data, $route_name)
    //{   
        //kint($data);
        //kint($route_name);

        //print_r($data);

        //print $route_name;

    //}